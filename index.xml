<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Murat ARSLAN</title>
    
    
    
    <link>https://arslanmurat06.github.io/</link>
    <description>Recent content on Murat ARSLAN</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Apr 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://arslanmurat06.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Invoke child generic classes&#39; methods using reflection C#</title>
      <link>https://arslanmurat06.github.io/posts/reflection/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://arslanmurat06.github.io/posts/reflection/</guid>
      <description>
        
          &lt;img src=&#34;https://arslanmurat06.github.io/img/reflection.jpeg&#34;/&gt;
          
        
        
        
          Hello Guys,
Today I&amp;rsquo;m going to share you some practical usage of reflection that I faced it before.
Think that;
You have a class and inside class there are some generic classes based the same class.
And you want to call the same method of these generic classes.
At this point Reflection makes our job easy. With reflection you can reach all these generic classes and invoke their same method.
          
        
        </description>
    </item>
    
    <item>
      <title>Background process with Hangfire and .NET 6</title>
      <link>https://arslanmurat06.github.io/posts/hangfire/</link>
      <pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://arslanmurat06.github.io/posts/hangfire/</guid>
      <description>
        
          &lt;img src=&#34;https://arslanmurat06.github.io/img/healthchecker.gif&#34;/&gt;
          
        
        
        
          For .NET environment sometimes you need some scheduler process for recurring jobs. Most popular schedule tools are Quartz and Hangfire.
Before, I had used Quartz in my some projects but after introduced with Hangfire, it completely changed my mind. Hangfire is open and free for commercial use. And one of my project I used Hangfire and you can see the difference between these two tools when you experience both of them.
          
        
        </description>
    </item>
    
    <item>
      <title>Making downloadable QR Code Generator With Flutter</title>
      <link>https://arslanmurat06.github.io/posts/qr_code/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://arslanmurat06.github.io/posts/qr_code/</guid>
      <description>
        
          &lt;img src=&#34;https://arslanmurat06.github.io/img/qr.png&#34;/&gt;
          
        
        
        
          One of my side web projects, I needed to use QR Code generator. There are many samples on web but I wanted it to be downloadable. With Flutter I should find the widget and should be saved as Image. At this point RepaintBoundary comes to help. With this widget I captured the widget as Image and to make it downloadable, I used dart:html.
To capture widget as Image dartShow/HideFuture&amp;lt;void&amp;gt; _capturePng() async {final picData = await _painter.
          
        
        </description>
    </item>
    
    <item>
      <title>Use multiple environments in ASP.NET Core with specific appsettings.json</title>
      <link>https://arslanmurat06.github.io/posts/environment/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://arslanmurat06.github.io/posts/environment/</guid>
      <description>
        
          &lt;img src=&#34;https://arslanmurat06.github.io/img/header.png&#34;/&gt;
          
        
        
        
          Before publishing a service or application to the production, we all may want to see how it behaves on test environments. So we have test servers or test dbs to check apis behaviours with this test environments.
Today I m going to show you how you publish your ASPNET Core Web API to the specific environment that will use specific appsettings.json file.
As you know there are appsettings.json that stores your connection strings, or other setttings.
          
        
        </description>
    </item>
    
    <item>
      <title>Error handling by using middlewares in .NET5 Web API</title>
      <link>https://arslanmurat06.github.io/posts/error_handling/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://arslanmurat06.github.io/posts/error_handling/</guid>
      <description>
        
          &lt;img src=&#34;https://arslanmurat06.github.io/img/error.jpg&#34;/&gt;
          
        
        
        
          Actually this error handling implementation is not specific for .NET5, it can be used on core versions as well but title became more attractive ðŸ˜œ I needed an error handling implementation on some web apis, and middlewares became best solution for me. Let me tell what I did.
I created a new middleware for error handling. This implementation works as global error handling. I can both log the error and send the error as a response to the client.
          
        
        </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://arslanmurat06.github.io/about/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://arslanmurat06.github.io/about/</guid>
      <description>
        
          
          
          
        
        
        
          Hi there My name is Murat and I have been working as a software developer in a Denmark based telecommunication company for 4 years. In may professional life I use .Net frameworks and write codes with C#. But out of my professional life, I try to use various technologies like Python, Dart for Flutterand sometimes JavaScript frameworks as React and a little bit React Native but after met with Flutter I gave up it.
          
        
        </description>
    </item>
    
    <item>
      <title>Hello Friend</title>
      <link>https://arslanmurat06.github.io/posts/hello/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://arslanmurat06.github.io/posts/hello/</guid>
      <description>
        
          &lt;img src=&#34;https://arslanmurat06.github.io/img/hello.jpg&#34;/&gt;
          
        
        
        
          Let&amp;rsquo;s start.
          
        
        </description>
    </item>
    
    <item>
      <title>Archive</title>
      <link>https://arslanmurat06.github.io/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://arslanmurat06.github.io/archive/</guid>
      <description>
        
          
          
          
        
        
        
          
          
        
        </description>
    </item>
    
  </channel>
</rss>